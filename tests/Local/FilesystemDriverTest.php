<?php

namespace Kyagie\Auditing\Drivers\Tests\Local;

use Kyagie\Auditing\Drivers\FilesystemDriver;
use Kyagie\Auditing\Drivers\Tests\Models\Person;
use Carbon\Carbon;
use Orchestra\Testbench\TestCase;

class FilesystemDriverTest extends TestCase
{
    protected function getEnvironmentSetUp($app)
    {
        $app->config->set('filesystems.disks', [
            'local' => [
                'driver' => 'local',
                'root' => env('LOCAL_STORAGE_PATH', storage_path('app')),
            ]
        ]);
    }

    protected function useDailyLoggingType($app)
    {
        $app->config->set('audit.drivers.filesystem.logging_type', 'daily');
    }

    protected function useHourlyLoggingType($app)
    {
        $app->config->set('audit.drivers.filesystem.logging_type', 'hourly');
    }

    protected function useUndefinedLoggingType($app)
    {
        $app->config->set('audit.drivers.filesystem.logging_type', 'undefined');
    }

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        foreach (glob(storage_path('app/audit*')) as $auditFile) {
            @unlink($auditFile);
        }
    }

    public function testAuditSingle()
    {
        $auditable = new Person();
        
        $driver = app(FilesystemDriver::class);

        $driver->audit($auditable);

        $auditFile = storage_path('app/audit.csv');
        $this->assertFileExists($auditFile);

        $contents = file($auditFile);

        // Header and first audit
        $this->assertCount(2, $contents);

        $driver->audit($auditable);
        $contents = file($auditFile);

        // Appends the data
        $this->assertCount(3, $contents);
    }

    /**
     * @environment-setup useDailyLoggingType
     */
    public function testAuditDaily()
    {
        $auditable = new Person();

        $driver = app(FilesystemDriver::class);

        $driver->audit($auditable);

        $format = (new \DateTime('now'))->format('Y-m-d');
        $auditFile = storage_path(sprintf('app/audit-%s.csv', $format));
        $this->assertFileExists($auditFile);

        $contents = file($auditFile);

        // Header and first audit
        $this->assertCount(2, $contents);

        $driver->audit($auditable);
        $contents = file($auditFile);

        // Appends the data
        $this->assertCount(3, $contents);
    }

    /**
     * @environment-setup useHourlyLoggingType
     */
    public function testAuditHourly()
    {
        $auditable = new Person();

        $driver = app(FilesystemDriver::class);

        $driver->audit($auditable);

        $format = (new \DateTime('now'))->format('Y-m-d-H');
        $auditFile = storage_path(sprintf('app/audit-%s-00-00.csv', $format));
        $this->assertFileExists($auditFile);

        $contents = file($auditFile);

        // Header and first audit
        $this->assertCount(2, $contents);

        $driver->audit($auditable);
        $contents = file($auditFile);

        // Appends the data
        $this->assertCount(3, $contents);
    }

    /**
     * @environment-setup useUndefinedLoggingType
     */
    public function testAuditUndefined()
    {
        $this->expectException(\InvalidArgumentException::class);

        app(FilesystemDriver::class);
    }

    public function testPrune()
    {
        $auditable = new Person();

        $driver = app(FilesystemDriver::class);

        $result = $driver->prune($auditable);

        $this->assertFalse($result);
    }
}
