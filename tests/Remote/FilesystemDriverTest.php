<?php

namespace Kyagie\Auditing\Drivers\Tests\Remote;

use Aws\S3\S3Client;
use Kyagie\Auditing\Drivers\FilesystemDriver;
use Kyagie\Auditing\Drivers\Tests\Models\Person;
use Illuminate\Support\Facades\Storage;
use Orchestra\Testbench\TestCase;

class FilesystemDriverTest extends TestCase
{
    private $bucket = 'laravel-auditing-filesystem-test';

    protected function getEnvironmentSetUp($app)
    {
        $app->config->set('filesystems.disks', [
            'local' => [
                'driver' => 'local',
                'root' => env('LOCAL_STORAGE_PATH', storage_path('app')),
            ],
            'remote' => [
                'driver' => 's3',
                'endpoint' => 'http://localhost:9005',
                'key' => 'minioadmin',
                'secret' => 'minioadmin',
                'region' => 'us-east-1',
                'bucket' => $this->bucket,
                'use_path_style_endpoint' => true
            ]
        ]);
    }

    protected function useRemoteDisk($app)
    {
        $app->config->set('audit.drivers.filesystem.disk', 'remote');
    }

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        Storage::disk('remote')->delete('audit.csv');

        $client = new S3Client([
            'version' => '2006-03-01',
            'driver' => 's3',
            'endpoint' => 'http://localhost:9005',
            'credentials' => [
                'key' => 'minioadmin',
                'secret' => 'minioadmin',
            ],
            'region' => 'us-east-1',
            'use_path_style_endpoint' => true
        ]);

        if (!$client->doesBucketExist($this->bucket)) {
            $client->createBucket(['Bucket' => $this->bucket]);
        }
    }

    /**
     * @environment-setup useRemoteDisk
     */
    public function testRemoteAudit()
    {
        $auditable = new Person();

        $driver = app(FilesystemDriver::class);

        $driver->audit($auditable);

        $auditFile = 'audit.csv';
        $this->assertTrue(Storage::disk('remote')->exists($auditFile));

        $contents = explode(PHP_EOL, Storage::disk('remote')->get($auditFile));

        // Header and first audit
        $this->assertCount(2, $contents);

        $driver->audit($auditable);
        $contents = explode(PHP_EOL, Storage::disk('remote')->get($auditFile));

        // Appends the data
        $this->assertCount(3, $contents);
    }
}
